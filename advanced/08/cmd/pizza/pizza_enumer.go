// Code generated by "enumer -trimprefix pizza -json -type pizza order.go"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _pizzaName = "VegePepperoniChickenHawaiian"

var _pizzaIndex = [...]uint8{0, 4, 13, 20, 28}

const _pizzaLowerName = "vegepepperonichickenhawaiian"

func (i pizza) String() string {
	if i < 0 || i >= pizza(len(_pizzaIndex)-1) {
		return fmt.Sprintf("pizza(%d)", i)
	}
	return _pizzaName[_pizzaIndex[i]:_pizzaIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _pizzaNoOp() {
	var x [1]struct{}
	_ = x[pizzaVege-(0)]
	_ = x[pizzaPepperoni-(1)]
	_ = x[pizzaChicken-(2)]
	_ = x[pizzaHawaiian-(3)]
}

var _pizzaValues = []pizza{pizzaVege, pizzaPepperoni, pizzaChicken, pizzaHawaiian}

var _pizzaNameToValueMap = map[string]pizza{
	_pizzaName[0:4]:        pizzaVege,
	_pizzaLowerName[0:4]:   pizzaVege,
	_pizzaName[4:13]:       pizzaPepperoni,
	_pizzaLowerName[4:13]:  pizzaPepperoni,
	_pizzaName[13:20]:      pizzaChicken,
	_pizzaLowerName[13:20]: pizzaChicken,
	_pizzaName[20:28]:      pizzaHawaiian,
	_pizzaLowerName[20:28]: pizzaHawaiian,
}

var _pizzaNames = []string{
	_pizzaName[0:4],
	_pizzaName[4:13],
	_pizzaName[13:20],
	_pizzaName[20:28],
}

// pizzaString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func pizzaString(s string) (pizza, error) {
	if val, ok := _pizzaNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _pizzaNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to pizza values", s)
}

// pizzaValues returns all values of the enum
func pizzaValues() []pizza {
	return _pizzaValues
}

// pizzaStrings returns a slice of all String values of the enum
func pizzaStrings() []string {
	strs := make([]string, len(_pizzaNames))
	copy(strs, _pizzaNames)
	return strs
}

// IsApizza returns "true" if the value is listed in the enum definition. "false" otherwise
func (i pizza) IsApizza() bool {
	for _, v := range _pizzaValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for pizza
func (i pizza) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for pizza
func (i *pizza) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("pizza should be a string, got %s", data)
	}

	var err error
	*i, err = pizzaString(s)
	return err
}
